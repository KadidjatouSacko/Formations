// diagnostic.js - Script pour diagnostiquer le probl√®me de connexion
import bcrypt from 'bcryptjs/dist/bcrypt';

async function diagnosticLogin(email, password) {
    console.log('=== DIAGNOSTIC CONNEXION ===\n');
    console.log(`üìß Email test√©: ${email}`);
    console.log(`üîê Mot de passe test√©: ${password}`);
    console.log('---');

    // Simuler les donn√©es de votre base
    const userFromDB = {
        id: 'cccccccc-cccc-cccc-cccc-cccccccccccc',
        email: 'dalla.sacko@hotmail.com',
        password_hash: '$2b$10$rGHqHkf8Nh.vHOI8B8TqBu7C8Z4K5mJdR2N1P7Q6S9T0U3V8W2X5Y',
        first_name: 'Dalla',
        last_name: 'Sacko',
        role: 'student',
        is_active: true,
        email_verified: true
    };

    // √âtape 1: V√©rifier l'email
    console.log('1Ô∏è‚É£ V√©rification de l\'email...');
    const emailNormalized = email.toLowerCase().trim();
    const emailMatch = emailNormalized === userFromDB.email;
    console.log(`   Email normalis√©: ${emailNormalized}`);
    console.log(`   Email en base: ${userFromDB.email}`);
    console.log(`   ‚úÖ Correspondance email: ${emailMatch ? 'OUI' : 'NON'}`);
    
    if (!emailMatch) {
        console.log('‚ùå PROBL√àME: Email ne correspond pas');
        return false;
    }

    // √âtape 2: V√©rifier le statut utilisateur
    console.log('\n2Ô∏è‚É£ V√©rification du statut utilisateur...');
    console.log(`   Actif: ${userFromDB.is_active}`);
    console.log(`   Email v√©rifi√©: ${userFromDB.email_verified}`);
    
    if (!userFromDB.is_active || !userFromDB.email_verified) {
        console.log('‚ùå PROBL√àME: Utilisateur inactif ou email non v√©rifi√©');
        return false;
    }

    // √âtape 3: V√©rifier le mot de passe
    console.log('\n3Ô∏è‚É£ V√©rification du mot de passe...');
    console.log(`   Hash en base: ${userFromDB.password_hash}`);
    console.log(`   Mot de passe fourni: "${password}"`);
    
    try {
        const passwordMatch = await bcrypt.compare(password, userFromDB.password_hash);
        console.log(`   ‚úÖ V√©rification bcrypt: ${passwordMatch ? 'SUCC√àS' : '√âCHEC'}`);
        
        if (passwordMatch) {
            console.log('\nüéâ CONNEXION R√âUSSIE !');
            console.log('Utilisateur connect√©:', {
                id: userFromDB.id,
                email: userFromDB.email,
                nom: `${userFromDB.first_name} ${userFromDB.last_name}`,
                role: userFromDB.role
            });
            return true;
        } else {
            console.log('\n‚ùå PROBL√àME: Mot de passe incorrect');
            
            // Test des mots de passe courants
            console.log('\nüîç Test des mots de passe courants...');
            const commonPasswords = ['password123', '123456', 'test123', 'admin', 'password'];
            
            for (const testPwd of commonPasswords) {
                const match = await bcrypt.compare(testPwd, userFromDB.password_hash);
                if (match) {
                    console.log(`‚úÖ TROUV√â! Le bon mot de passe est: "${testPwd}"`);
                    return false;
                }
            }
            console.log('‚ùå Aucun mot de passe courant ne correspond');
        }
        
    } catch (error) {
        console.log(`‚ùå ERREUR bcrypt: ${error.message}`);
        return false;
    }
    
    return false;
}

// Tests
async function runTests() {
    console.log('üß™ LANCEMENT DES TESTS DE DIAGNOSTIC\n');
    
    // Test avec les donn√©es fournies
    await diagnosticLogin('dalla.sacko@hotmail.com', 'password123');
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Test avec un autre mot de passe
    await diagnosticLogin('dalla.sacko@hotmail.com', 'test123');
}

// Ex√©cuter les tests
runTests().catch(console.error);